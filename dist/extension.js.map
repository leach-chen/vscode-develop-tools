{"version":3,"sources":["../webpack/bootstrap","../external \"vscode\"","../external \"fs\"","../external \"path\"",".././src/extension.ts",".././src/run-script.ts",".././src/web-tools.ts",".././src/utils/util.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","context","console","log","runScripts","vscode","commands","registerCommand","showScripts","runWebTools","uri","goWebTools","subscriptions","push","wok","workspace","rootPath","packageJsonObj","readPakageJsonObj","packageJsonPath","existsSync","readPakageJson","fs","readFile","Uri","file","JSON","parse","toString","e","getPakageJsonObj","developconfigJsonObj","readDevelopconfigJsonObj","developconfigJsonPath","developconfigJson","getDevelopconfigJsonObj","splitObject1","splitObject2","defaultObject","scriptsObj","scripts","execCmdObj","execCmd","execObj","values","length","assign","count","window","terminals","createTerminal","cwd","hideFromUser","showQuickPick","keys","then","response","slice","sendText","terminal","show","setTimeout","runExecCmd","cmd","showErrorMessage","path","panel","createWebviewPanel","enableScripts","retainContextWhenHidden","webview","html","templatePath","resourcePath","util","getExtensionFileAbsolutePath","dirPath","dirname","readFileSync","replace","$1","$2","resolve","with","scheme","getWebViewContent","onDidReceiveMessage","message","undefined","getProjectPath","document","activeTextEditor","currentFile","fsPath","projectPath","workspaceFolders","map","item","readdirSync","filter","test","forEach","folder","indexOf","relativePath","join","extensionPath"],"mappings":"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","file":"extension.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module 'vscode' contains the VS Code extensibility API\r\n// Import the module and reference it with the alias vscode in your code below\r\nimport * as vscode from \"vscode\";\r\nimport { showScripts } from \"./run-script\";\r\nimport { goWebTools } from \"./web-tools\";\r\n\r\n// this method is called when your extension is activated\r\n// your extension is activated the very first time the command is executed\r\nexport function activate(context: vscode.ExtensionContext) {\r\n  // Use the console to output diagnostic information (console.log) and errors (console.error)\r\n  // This line of code will only be executed once when your extension is activated\r\n  console.log(\r\n    'Congratulations, your extension \"vscode-develop-tools\" is now active!'\r\n  );\r\n\r\n  // The command has been defined in the package.json file\r\n  // Now provide the implementation of the command with registerCommand\r\n  // The commandId parameter must match the command field in package.json\r\n  let runScripts = vscode.commands.registerCommand(\r\n    \"vscode-develop-tools.runScripts\",\r\n    () => {\r\n      // The code you place here will be executed every time your command is executed\r\n\r\n      // Display a message box to the user\r\n      //   vscode.window.showInformationMessage(\r\n      //     \"Hello World from vscode-develop-tools!\"\r\n      //   );\r\n      showScripts();\r\n    }\r\n  );\r\n\r\n  let runWebTools = vscode.commands.registerCommand(\r\n    \"vscode-develop-tools.goWebTools\",\r\n    uri => {\r\n      goWebTools(context, uri);\r\n    }\r\n  );\r\n\r\n  context.subscriptions.push(runScripts);\r\n  context.subscriptions.push(runWebTools);\r\n}\r\n\r\n// this method is called when your extension is deactivated\r\nexport function deactivate() {}\r\n","import { existsSync } from \"fs\";\r\nimport { Uri, window, workspace } from \"vscode\";\r\n\r\n/**\r\n * 获取默认对象\r\n */\r\nconst getDefaultObject: any = () => {\r\n  /* let defaultObject: any = {\r\n    \"Android Console Log\": \"newcmd react-native log-android\",\r\n    \"IOS Console Log\": \"newcmd react-native log-ios\",\r\n    \"Show Android Menu\": \"adb shell input keyevent 82\",\r\n    \"Database Forward\": \"adb forward tcp:8585 tcp:8585\"\r\n  };\r\n  return defaultObject; */\r\n  return {};\r\n};\r\n\r\n/**\r\n * 获取package.json对象\r\n * @param wok\r\n */\r\nconst getPakageJsonObj = async (wok: any) => {\r\n  let readPakageJsonObj: any;\r\n  const packageJsonPath = `${wok}/package.json`;\r\n  //const checkPkgManager = existsSync(`${wok}/package-lock.json`);\r\n  //const useNpm = checkPkgManager ? true : false;\r\n  const isFileExists = existsSync(`${wok}/package.json`);\r\n  if (isFileExists) {\r\n    let readPakageJson = await workspace.fs.readFile(Uri.file(packageJsonPath));\r\n    try {\r\n      readPakageJsonObj = JSON.parse(readPakageJson.toString());\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n  return readPakageJsonObj;\r\n};\r\n\r\n/**\r\n * 获取developconfig.json对象\r\n * @param wok\r\n */\r\nconst getDevelopconfigJsonObj = async (wok: any) => {\r\n  let readDevelopconfigJsonObj: any;\r\n  const developconfigJsonPath = `${wok}/dtconfig.json`;\r\n  const isFileExists = existsSync(`${wok}/dtconfig.json`);\r\n  if (isFileExists) {\r\n    let developconfigJson = await workspace.fs.readFile(\r\n      Uri.file(developconfigJsonPath)\r\n    );\r\n    try {\r\n      readDevelopconfigJsonObj = JSON.parse(developconfigJson.toString());\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n  return readDevelopconfigJsonObj;\r\n};\r\n\r\nexport async function showScripts() {\r\n  const wok = workspace.rootPath;\r\n\r\n  const NEWCMD_SPLIT = \"newcmd\"; //指令前面添加该指令用于判定是否需要新建命令行来执行\r\n\r\n  let packageJsonObj: any = await getPakageJsonObj(wok); //package.json对象\r\n  let developconfigJsonObj: any = await getDevelopconfigJsonObj(wok); //自定义命令对象\r\n  const runCommand = \"npm\";\r\n\r\n  let splitObject1 = {\r\n    \"--------------------------------------------------------------------------------------------------------------\":\r\n      \"\"\r\n  };\r\n  let splitObject2 = {\r\n    \"---------------------------------------------------------------------------------------------------------------\":\r\n      \"\"\r\n  };\r\n\r\n  let defaultObject = getDefaultObject(); //默认菜单内容对象\r\n  let scriptsObj = packageJsonObj?.scripts; //运行命令的对象\r\n  let execCmdObj = developconfigJsonObj?.execCmd; //新建命令行对象\r\n\r\n  let execObj: any = {};\r\n  if (defaultObject && Object.values(defaultObject).length > 0) {\r\n    execObj = defaultObject;\r\n  }\r\n\r\n  if (\r\n    defaultObject &&\r\n    Object.values(defaultObject).length > 0 &&\r\n    scriptsObj &&\r\n    Object.values(scriptsObj).length > 0\r\n  ) {\r\n    execObj = Object.assign(execObj, splitObject1); //默认命令行与自定义命令之间添加分割线\r\n  }\r\n\r\n  let count = 0;\r\n  if (execCmdObj && Object.values(execCmdObj).length > 0) {\r\n    execObj = Object.assign(execObj, execCmdObj); //添加自定义命令对象，不新建命令行窗口\r\n    count++;\r\n  }\r\n\r\n  if (scriptsObj && Object.values(scriptsObj).length > 0) {\r\n    if (count > 0) {\r\n      execObj = Object.assign(execObj, splitObject2); //如果存在自定义命令行，则添加分割线\r\n    }\r\n    execObj = Object.assign(execObj, scriptsObj);\r\n  }\r\n\r\n  if (window.terminals?.length == 0) {\r\n    window.createTerminal({\r\n      cwd: wok,\r\n      hideFromUser: false,\r\n      name: \"cmd\"\r\n    });\r\n  }\r\n\r\n  if (Object.values(execObj).length > 0) {\r\n    window.showQuickPick(Object.keys(execObj)).then(async response => {\r\n      if (response) {\r\n        if (\r\n          window.terminals?.length > 0 &&\r\n          execObj[response].slice(0, NEWCMD_SPLIT.length) != NEWCMD_SPLIT &&\r\n          !(response in scriptsObj)\r\n        ) {\r\n          window.terminals[0].sendText(execObj[response]);\r\n        } else {\r\n          const terminal = window.createTerminal({\r\n            cwd: wok,\r\n            hideFromUser: false,\r\n            name: response\r\n          });\r\n          if (!(response in splitObject1) && !(response in splitObject2)) {\r\n            terminal.show();\r\n            setTimeout(() => {\r\n              let runExecCmd = \"\";\r\n              if (\r\n                (defaultObject && response in defaultObject) ||\r\n                (execCmdObj && response in execCmdObj)\r\n              ) {\r\n                let cmd = execObj[response];\r\n                if (cmd.slice(0, NEWCMD_SPLIT.length) == NEWCMD_SPLIT) {\r\n                  terminal.sendText(\r\n                    cmd.slice(NEWCMD_SPLIT.length + 1, cmd.length)\r\n                  );\r\n                } else {\r\n                  runExecCmd = cmd;\r\n                }\r\n              } else {\r\n                runExecCmd = `${runCommand} run ${response}`;\r\n              }\r\n              terminal.sendText(runExecCmd);\r\n            }, 500);\r\n          }\r\n        }\r\n      }\r\n    });\r\n  } else {\r\n    window.showErrorMessage(\r\n      \"package.json or developconfig.json not found in workspace\"\r\n    );\r\n  }\r\n}\r\n","import { ExtensionContext, window, workspace } from \"vscode\";\r\nimport * as util from \"./utils/util\";\r\n\r\nconst vscode = require(\"vscode\");\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\n\r\nconst getWebViewContent = (context: any, templatePath: string) => {\r\n  const resourcePath = util.getExtensionFileAbsolutePath(context, templatePath);\r\n  const dirPath = path.dirname(resourcePath);\r\n  let html = fs.readFileSync(resourcePath, \"utf-8\");\r\n  // vscode不支持直接加载本地资源，需要替换成其专有路径格式，这里只是简单的将样式和JS的路径替换\r\n  html = html.replace(\r\n    /(<link.+?href=\"|<script.+?src=\"|<img.+?src=\")(.+?)\"/g,\r\n    (m: any, $1: any, $2: any) => {\r\n      return (\r\n        $1 +\r\n        vscode.Uri.file(path.resolve(dirPath, $2))\r\n          .with({ scheme: \"vscode-resource\" })\r\n          .toString() +\r\n        '\"'\r\n      );\r\n    }\r\n  );\r\n  return html;\r\n};\r\n\r\nexport const goWebTools = (context: ExtensionContext, uri: any) => {\r\n  //const projectPath = workspace.rootPath;\r\n  //if (!projectPath) return;\r\n  try {\r\n    const panel = vscode.window.createWebviewPanel(\r\n      \"WebTools\", // viewType\r\n      \"Tools Bundle\", // 视图标题\r\n      1, // 显示在编辑器的哪个部位\r\n      {\r\n        enableScripts: true, // 启用JS，默认禁用\r\n        retainContextWhenHidden: true // webview被隐藏时保持状态，避免被重置\r\n      }\r\n    );\r\n\r\n    //let global = { projectPath, panel };\r\n    panel.webview.html = getWebViewContent(context, \"src/webtools/index.html\");\r\n    panel.webview.onDidReceiveMessage(\r\n      (message: any) => {},\r\n      undefined,\r\n      context.subscriptions\r\n    );\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\n","import { readdirSync } from \"fs\";\nimport { window, workspace } from \"vscode\";\nconst path = require(\"path\");\n\n/**\n * 获取当前所在工程根目录，有3种使用方法：<br>\n * getProjectPath(uri) uri 表示工程内某个文件的路径<br>\n * getProjectPath(document) document 表示当前被打开的文件document对象<br>\n * getProjectPath() 会自动从 activeTextEditor 拿document对象，如果没有拿到则报错\n * @param {*} document\n */\nexport const getProjectPath = (document: any) => {\n  if (!document) {\n    document = window.activeTextEditor\n      ? window.activeTextEditor.document\n      : null;\n  }\n  if (!document) {\n    //this.showError(\"当前激活的编辑器不是文件或者没有文件被打开！\");\n    return \"11\";\n  }\n  const currentFile = (document.uri ? document.uri : document).fsPath;\n  let projectPath = null;\n\n  let workspaceFolders: string[] | undefined = workspace.workspaceFolders?.map(\n    item => item.uri.path\n  );\n  // 由于存在Multi-root工作区，暂时没有特别好的判断方法，先这样粗暴判断\n  // 如果发现只有一个根文件夹，读取其子文件夹作为 workspaceFolders\n  if (\n    workspaceFolders?.length == 1 &&\n    workspaceFolders[0] === workspace.rootPath\n  ) {\n    const rootPath = workspaceFolders[0];\n    var files = readdirSync(rootPath);\n    workspaceFolders = files\n      .filter((name: string) => !/^\\./g.test(name))\n      .map((name: any) => path.resolve(rootPath, name));\n    // vscode.workspace.rootPath会不准确，且已过时\n    // return vscode.workspace.rootPath + '/' + this._getProjectName(vscode, document);\n  }\n  workspaceFolders?.forEach((folder: any) => {\n    if (currentFile.indexOf(folder) === 0) {\n      projectPath = folder;\n    }\n  });\n  if (!projectPath) {\n    //this.showError(\"获取工程根路径异常！\");\n    return \"22\";\n  }\n  return projectPath;\n};\n\n// /**\n//  * 获取当前工程名\n//  */\n// getProjectName: function (projectPath: any) {\n//   return path.basename(projectPath);\n// },\n// getPluginPath() {},\n// /**\n//  * 将一个单词首字母大写并返回\n//  * @param {*} word 某个字符串\n//  */\n// upperFirstLetter: function (word: any) {\n//   return (word || \"\").replace(/^\\w/, m => m.toUpperCase());\n// },\n// /**\n//  * 将一个单词首字母转小写并返回\n//  * @param {*} word 某个字符串\n//  */\n// lowerFirstLeter: function (word: any) {\n//   return (word || \"\").replace(/^\\w/, m => m.toLowerCase());\n// },\n// /**\n//  * 全局日志开关，发布时可以注释掉日志输出\n//  */\n// log: function (...args: any) {\n//   console.log(...args);\n// },\n// /**\n//  * 全局日志开关，发布时可以注释掉日志输出\n//  */\n// error: function (...args: any) {\n//   console.error(...args);\n// },\n// /**\n//  * 弹出错误信息\n//  */\n// showError: function (info: any) {\n//   vscode.window.showErrorMessage(info);\n// },\n// /**\n//  * 弹出提示信息\n//  */\n// showInfo: function (info: any) {\n//   vscode.window.showInformationMessage(info);\n// },\n// findStrInFolder: function (folderPath: any, str: any) {},\n// /**\n//  * 从某个文件里面查找某个字符串，返回第一个匹配处的行与列，未找到返回第一行第一列\n//  * @param filePath 要查找的文件\n//  * @param reg 正则对象，最好不要带g，也可以是字符串\n//  */\n// findStrInFile: function (filePath: any, reg: string | RegExp) {\n//   const content = fs.readFileSync(filePath, \"utf-8\");\n//   reg = typeof reg === \"string\" ? new RegExp(reg, \"m\") : reg;\n//   // 没找到直接返回\n//   if (content.search(reg) < 0) return { row: 0, col: 0 };\n//   const rows = content.split(os.EOL);\n//   // 分行查找只为了拿到行\n//   for (let i = 0; i < rows.length; i++) {\n//     let col = rows[i].search(reg);\n//     if (col >= 0) {\n//       return { row: i, col };\n//     }\n//   }\n//   return { row: 0, col: 0 };\n// },\n// /**\n//  * 获取某个字符串在文件里第一次出现位置的范围，\n//  */\n// getStrRangeInFile: function (filePath: any, str: string | RegExp | any[]) {\n//   var pos = this.findStrInFile(filePath, str);\n//   return new vscode.Range(\n//     new vscode.Position(pos.row, pos.col),\n//     new vscode.Position(pos.row, pos.col + str.length)\n//   );\n// },\n// /**\n//  * 简单的检测版本大小\n//  */\n// checkVersion: function (\n//   version1: string | number,\n//   version2: string | number\n// ) {\n//   version1 = parseInt(version1.replace(/\\./g, \"\"));\n//   version2 = parseInt(version2.replace(/\\./g, \"\"));\n//   return version1 > version2;\n// },\n/**\n * 获取某个扩展文件绝对路径\n * @param context 上下文\n * @param relativePath 扩展中某个文件相对于根目录的路径，如 images/test.jpg\n */\nexport const getExtensionFileAbsolutePath = (\n  context: { extensionPath: any },\n  relativePath: any\n) => {\n  return path.join(context.extensionPath, relativePath);\n};\n// /**\n//  * 获取某个扩展文件相对于webview需要的一种特殊路径格式\n//  * 形如：vscode-resource:/Users/toonces/projects/vscode-cat-coding/media/cat.gif\n//  * @param context 上下文\n//  * @param relativePath 扩展中某个文件相对于根目录的路径，如 images/test.jpg\n//  */\n// getExtensionFileVscodeResource: function (\n//   context: { extensionPath: any },\n//   relativePath: any\n// ) {\n//   const diskPath = vscode.Uri.file(\n//     path.join(context.extensionPath, relativePath)\n//   );\n//   return diskPath.with({ scheme: \"vscode-resource\" }).toString();\n// },\n// /**\n//  * 在Finder中打开某个文件或者路径\n//  */\n// openFileInFinder: function (filePath: string) {\n//   if (!fs.existsSync(filePath)) {\n//     this.showError(\"文件不存在：\" + filePath);\n//   }\n//   // 如果是目录，直接打开就好\n//   if (fs.statSync(filePath).isDirectory()) {\n//     exec(`open ${filePath}`);\n//   } else {\n//     // 如果是文件，要分开处理\n//     const fileName = path.basename(filePath);\n//     filePath = path.dirname(filePath);\n//     // 这里有待完善，还不知道如何finder中如何选中文件\n//     exec(`open ${filePath}`);\n//   }\n// },\n// /**\n//  * 在vscode中打开某个文件\n//  * @param {*} path 文件绝对路径\n//  * @param {*} text 可选，如果不为空，则选中第一处匹配的对应文字\n//  */\n// openFileInVscode: function (path: any, text: string | RegExp | any[]) {\n//   let options = undefined;\n//   if (text) {\n//     const selection = this.getStrRangeInFile(path, text);\n//     options = { selection };\n//   }\n//   vscode.window.showTextDocument(vscode.Uri.file(path), options);\n// },\n// /**\n//  * 用JD-GUI打开jar包\n//  */\n// openJarByJdGui: function (jarPath: string) {\n//   // 如何选中文件有待完善\n//   const jdGuiPath = vscode.workspace\n//     .getConfiguration()\n//     .get(\"eggHelper.jdGuiPath\");\n//   if (!jdGuiPath) {\n//     this.showError(\"JD-GUI路径不能为空！\");\n//     return;\n//   }\n//   if (!fs.existsSync(jdGuiPath)) {\n//     this.showError(\n//       \"您还没有安装JD-GUI，请安装完后到vscode设置里面找到HSF助手并进行路径配置。\"\n//     );\n//     return;\n//   }\n//   if (!fs.existsSync(jarPath)) {\n//     this.showError(\"jar包未找到：\" + jarPath);\n//     return;\n//   }\n//   exec(`open ${jarPath} -a ${jdGuiPath}`);\n// },\n// /**\n//  * 使用默认浏览器中打开某个URL\n//  */\n// openUrlInBrowser: function (url: any) {\n//   exec(`open '${url}'`);\n// },\n// /**\n//  * 递归遍历清空某个资源的require缓存\n//  * @param {*} absolutePath\n//  */\n// clearRequireCache(absolutePath: string) {\n//   const root = require.cache[absolutePath];\n//   if (!root) return;\n//   if (root.children) {\n//     // 如果有子依赖项，先清空依赖项的缓存\n//     root.children.forEach(item => {\n//       this.clearRequireCache(item.id);\n//     });\n//   }\n//   delete require.cache[absolutePath];\n// },\n// /**\n//  * 动态require，和普通require不同的是，加载之前会先尝试删除缓存\n//  * @param {*} modulePath\n//  */\n// dynamicRequire(modulePath: string) {\n//   this.clearRequireCache(modulePath);\n//   return require(modulePath);\n// },\n// /**\n//  * 读取properties文件\n//  * @param {*} filePath\n//  */\n// readProperties(filePath: string) {\n//   const content = fs.readFileSync(filePath, \"utf-8\");\n//   let rows = content.split(os.EOL);\n//   rows = rows.filter((row: string) => row && row.trim() && !/^#/.test(row));\n//   const result = {};\n//   rows.forEach((row: string) => {\n//     let temp = row.split(\"=\");\n//     result[temp[0].trim()] = temp[1].trim();\n//   });\n//   return result;\n// },\n// /**\n//  * 比较2个对象转JSON字符串后是否完全一样\n//  * 特别注意，由于JS遍历对象的无序性（部分浏览器是按照添加顺序遍历的）导致同样的对象，\n//  * 转成JSON串之后反而不一样，所以这里采用其它方式实现。\n//  * @param {*} obj1\n//  * @param {*} obj2\n//  */\n// jsonEquals(obj1: any, obj2: any) {\n//   let s1 = this.formatToSpecialJSON(obj1, \"\", true);\n//   let s2 = this.formatToSpecialJSON(obj2, \"\", true);\n//   return s1 === s2;\n// }\n"],"sourceRoot":""}